{"version":3,"sources":["assets\\Script\\LineManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Common, { inGameState } from \"./Common\";\nimport DrawLine from \"./DrawLine\";\nimport GameConfig from \"./GameConfig\";\nimport GameManager from \"./GameManager\";\n\n\nconst {ccclass,property} = cc._decorator;\n\n@ccclass\nexport default class LineCollider extends cc.Component {\n   \n    // @property(cc.Node)\n    // private includeNode: cc.Node = null;\n\n    @property(cc.Node)\n    private handDrawNode: cc.Node = null;\n\n    // @property(cc.Node)\n    // private uiNode: cc.Node = null;\n\n    @property(cc.Prefab)\n    private pointGraphicPrefab: cc.Prefab = null;\n\n    @property\n    public hintText: string = \"\";\n\n    @property\n    public timeChecking: number = 5;\n\n    @property(cc.Node)\n    protected characterNode: cc.Node = null;\n\n    @property\n    public isCanTouchDrawLine: boolean = true;\n\n    //Character meet target to win\n    @property\n    public isMeetTargetLevel: boolean = false;\n    @property\n    public isToggleNewAnim: boolean = false;\n   \n    toggleNode: cc.Node = null;\n\n    protected pointGraphic: DrawLine = null;\n    // canShowTutorial: boolean = true;\n\n    private pointNode: cc.Node = null;\n\n    protected _posList: cc.Vec2[] = [];\n\n    private _drawNode: cc.Node = null;\n    @property\n    public isToggleOnWall: boolean = true;\n\n    private hasDrawnLine: boolean = false;\n    @property\n    isMoving: boolean = false;\n\n\n    onLoad() {\n        this.handDrawNode.on('touchstart', this.StartTouch, this);\n        this.handDrawNode.on('touchmove', this.TouchMove, this);\n        this.handDrawNode.on('touchend', this.EndTouch, this);\n        this.handDrawNode.on('touchcancel', this.EndTouch, this);\n        Common._ins.node.on(Common._ins.PassLevelEvent,this.onPassLevel,this);\n        Common._ins.node.on(Common._ins.FailLevelEvent,this.onFailedLevel,this);\n        this.pointNode = cc.instantiate(GameManager.instance.brushPrefab);\n        this.pointNode.setPosition(0, 0, 0);\n    }\n    \n    StartTouch(event: cc.Event.EventTouch) {\n        if (GameConfig.gameState != inGameState.PLAYING) return;\n        let pos = event.touch.getLocation();\n        console.log(\"value of pos start: \" + pos);\n        let n_pos = this.handDrawNode.convertToNodeSpaceAR(pos);\n        this.pointNode.parent = this.handDrawNode;\n        this.pointNode.active = true;\n        this.pointNode.setPosition(n_pos);\n        this.createPointGraphics(n_pos);\n        this.isMoving = true;\n        this._drawNode.addComponent(cc.RigidBody);\n        this._drawNode.getComponent(cc.RigidBody).type = cc.RigidBodyType.Static;\n    }\n\n    private _tempPos = null;\n\n    TouchMove(event: cc.Event.EventTouch) {\n        if (GameConfig.gameState != inGameState.PLAYING) return;\n        if (!this._drawNode) return;\n        //console.log(\"value of isCollieWhilePlaying in LineManager: \" + this.pointGraphic.isColliderWhilePlaying);\n       \n        if(this.pointGraphic.getIsCollideWhilePlaying){\n            //console.log(\"value of tempos: \" + this._tempPos);\n            let tmpPos = event.touch.getLocation();\n            let pos1 = this.handDrawNode.convertToNodeSpaceAR(tmpPos);\n            console.log(\"position of mouse: \" + pos1);\n            if(this.node.getChildByName(this.pointGraphic.getNameCollider) != null){\n                console.log(\"Has Player in LineManager\");\n                //this.CheckCutPolygonCollider(this._tempPos, event.getLocation());\n                if (!this.CheckCutPolygonCollider(this._tempPos, event.getLocation(),this.pointGraphic.getNameCollider )){\n                    this.pointGraphic.setIsCollierWhilePlaying = false;\n                }\n                \n            }\n\n            return;\n        }\n        let pos = event.touch.getLocation();\n        let n_pos = this.handDrawNode.convertToNodeSpaceAR(pos);\n        this.pointNode.active = true;\n        this.pointNode.setPosition(n_pos);\n\n        if (!this._tempPos) {\n            this._tempPos = n_pos;\n        } else {\n            let distance = cc.Vec2.distance(this._tempPos, n_pos);\n            if (distance >= 8) {\n                distance = this._jugement(n_pos);\n                if (distance >= 8) {\n                    let check = false;\n                    if ( this.node.getChildByName(\"e\") != null ){\n                       if (this.CheckCutPolygonCollider(this._tempPos, event.getLocation(),\"e\")){\n                            check = true;   \n                       }\n                    }\n                    if ( this.node.getChildByName(\"e2\") != null ){\n                        if (this.CheckCutPolygonCollider(this._tempPos, event.getLocation(),\"e2\")){\n                             check = true;   \n                        }\n                    }\n                    if ( this.node.getChildByName(\"BG2\") != null ){\n                        if (this.CheckCutPolygonCollider(this._tempPos, event.getLocation(),\"BG2\")){\n                             check = true;   \n                        }\n                    }\n                    if(this.CheckCutPolygonCollider(this._tempPos, event.getLocation(), \"Player\")){\n                        check = true;\n                    }\n                    if(this.CheckCutPolygonCollider(this._tempPos, event.getLocation(), \"BG\")){\n                        check = true;\n                    }\n                    if ( check == false){\n                        this.pointGraphic.updateDrawPoints(n_pos);\n                        this._tempPos = n_pos;\n                        this.addPhyscisComponent();\n                    }\n                    //console.log(\"value of n_pos: \" + n_pos);\n                    \n                }\n            }\n        }\n    }\n    \n    EndTouch() {\n        if (GameConfig.gameState != inGameState.PLAYING) return;\n        this.startMoving(); \n    }\n    CheckCutPolygonCollider(point1: cc.Vec2, point2:cc.Vec2, name: string): boolean{\n        console.log(\"value of Point1: \" + point1);\n        console.log(\"value of Point2: \" + point2);\n        const objectWithCollider: cc.Node = this.node.getChildByName(name);\n        const collider: cc.PolygonCollider = objectWithCollider.getComponent(cc.PolygonCollider);\n\n        if (collider) {\n            const worldPoint = this.node.convertToWorldSpaceAR(point1);\n            const mousePoint = objectWithCollider.convertToWorldSpaceAR(point2);\n            console.log(\"value of worldPoint: \" + worldPoint);\n            console.log(\"value of mousePoint: \" + mousePoint);\n            const colliderWorldPoints = collider.world.points;\n            console.log(\"length of colliderWorldPoint: \" + colliderWorldPoints.length);\n            for (let i = 0; i < colliderWorldPoints.length; i++) {\n                const p1 = colliderWorldPoints[i];\n                const p2 = colliderWorldPoints[(i + 1) % colliderWorldPoints.length];\n                if (cc.Intersection.lineLine(p1, p2, point2, worldPoint)) {\n                    console.log(\"Intersection detected with PolygonCollider!\");\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    private _jugement(pos: cc.Vec2) {\n        let distance = 100;\n        for (let i = 0; i < this._posList.length; i++) {\n            let dis = cc.Vec2.distance(pos, this._posList[i]);\n            distance = dis < distance ? dis : distance;\n\n        }\n        return distance;\n    }\n\n    addPhyscisComponent(): void{\n        this._posList = this.pointGraphic.getListPoint();\n        if (this._posList.length > 2){\n            let post_1 = this._posList[this._posList.length-1];\n            let post_2 = this._posList[this._posList.length-2];\n            this.addRectangleBetweenPointsToBody(this._drawNode,post_1,post_2);\n        }\n    }\n    startMoving() {\n        //Add physical\n        // let self = this;\n        // this._posList = this.pointGraphic.getListPoint();\n        // this._addPhysices(function () {\n        //     self.DoCheckingComplete();\n        // });\n        this._drawNode.getComponent(cc.RigidBody).type = cc.RigidBodyType.Dynamic;\n        this.DoCheckingComplete();\n    }\n    \n    DoCheckingComplete()\n    {\n        GameConfig.gameState = inGameState.CHECKING;\n        GameManager.instance.startCounting(this.timeChecking);\n        Common.instance.node.emit(\"StartMovingEvent\");\n    }\n    public _addPhysices(callback: any) {\n        this._drawNode.removeAllChildren(true);\n        // this._drawNode.removeComponent(cc.RigidBody);\n        // this._drawNode.removeComponent(cc.PolygonCollider);\n        // this._drawNode.removeComponent(cc.PhysicsPolygonCollider);\n        this.addBoxPhysic(this._drawNode);\n        callback();\n    }\n    addBoxPhysic(g: cc.Node) {\n        try {\n            g.addComponent(cc.RigidBody);\n            g.getComponent(cc.RigidBody).type = cc.RigidBodyType.Static;\n            for (let i = 0; i < this._posList.length - 1; i++) {\n                let point1 = this._posList[i];\n                let point2 = this._posList[i + 1];\n                this.addRectangleBetweenPointsToBody(g, point1, point2);\n            }\n        } catch (error) {\n            this._drawNode.destroy();\n            return;\n        }\n    }\n   \n   \n\n\n    addRectangleBetweenPointsToBody(b2Body: cc.Node, start: cc.Vec2, end: cc.Vec2) {\n        let distance = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));\n        let sx = start.x;\n        let sy = start.y;\n        let ex = end.x;\n        let ey = end.y;\n        let dist_x = sx - ex;\n        let dist_y = sy - ey;\n        let angle = Math.atan2(dist_y, dist_x);\n\n        let px = (sx + ex) / 2;\n        let py = (sy + ey) / 2;\n        let width = Math.abs(distance);\n        let height = 20;\n\n\n        let center = new cc.Vec2(px, py);\n\n        let bc: cc.PhysicsPolygonCollider = b2Body.addComponent(cc.PhysicsPolygonCollider);\n        bc.density = 1;\n        bc.friction = 0.1;\n        bc.restitution = 0.5;\n        bc.points = this.getListPointFrom(center, angle, height, width);\n        let polyCollier: cc.PolygonCollider = b2Body.addComponent(cc.PolygonCollider);\n        polyCollier.points = this.getListPointFrom(center, angle, height, width);\n        \n        bc.apply();\n    }\n\n\n    getListPointFrom(center: cc.Vec2, angle: number, height: number, width: number): cc.Vec2[] {\n        let Top_Right = new cc.Vec2();\n        let Top_Left = new cc.Vec2();\n        let Bot_Left = new cc.Vec2();\n        let Bot_Right = new cc.Vec2();\n\n        let halfW = width / 2;\n        let halfH = height / 2;\n        let cos = Math.cos(angle);\n        let sin = Math.sin(angle);\n\n        Top_Right.x = center.x + (halfW * cos) - (halfH * sin);\n        Top_Right.y = center.y + (halfW * sin) + (halfH * cos);\n        Top_Left.x = center.x - (halfW * cos) - (halfH * sin);\n        Top_Left.y = center.y - (halfW * sin) + (halfH * cos);\n        Bot_Left.x = center.x - (halfW * cos) + (halfH * sin);\n        Bot_Left.y = center.y - (halfW * sin) - (halfH * cos);\n        Bot_Right.x = center.x + (halfW * cos) + (halfH * sin);\n        Bot_Right.y = center.y + (halfW * sin) - (halfH * cos);\n\n        return [Top_Right, Top_Left, Bot_Left, Bot_Right];\n    }\n\n    createPointGraphics(pos: cc.Vec2) {\n        let listRope = this.handDrawNode.children;\n        for (let i = 0; i < listRope.length - 1; i++) {\n            listRope[i].removeFromParent(true);\n        }\n        this._drawNode = cc.instantiate(this.pointGraphicPrefab);\n        this.pointGraphic = this._drawNode.getComponent(DrawLine);\n        this._drawNode.parent = this.handDrawNode;\n        this._drawNode.setSiblingIndex(0);\n        this.pointGraphic.splice();\n        this.pointGraphic.updateDrawPoints(pos);\n    }\n\n    ClearGraphics() {\n        for (let pointGraphic of this.handDrawNode.children) {\n            if (pointGraphic.name === \"Line\") {\n                pointGraphic.removeFromParent(true);\n            }\n        }\n    }    \n    onFailedLevel() {\n        this.playFailEffect();\n        this.schedule(function () {\n            this.ClearGraphics();\n            GameManager.instance.restartLevel();\n        }, 0.5);\n    }\n\n    playFailEffect()\n    {\n        let failAni= cc.instantiate(GameManager._ins.aniFailPrefab);\n        failAni.parent = this.node;\n    }\n\n    playPassEffect()\n    {\n        let passAni = cc.instantiate(GameManager._ins.aniWinPrefab);\n        passAni.parent = this.node;\n    }\n    onPassLevel()\n    {\n        this.playPassEffect()\n        if(this.isToggleNewAnim == false)\n        {}else{\n            this.toggleNode.active == false;\n        }\n        GameManager.instance.onCompleteLevel();\n        \n    }\n}\n\n"]}